{
  "hash": "7d31b79aed8f49623d52fa6ad0b8ccb1",
  "result": {
    "markdown": "---\ntitle: \"Chapter 1 Assignment\"\nauthor: Anish Goyal\ndate: January 23, 2023\nformat: html\ntoc: true\ntoc-location: body\ncode-overflow: wrap\ncode-line-numbers: true\n---\n\n{{< pagebreak >}}\n\n\n\n## 1.7 Problems\n\n### Problem 1.7.1: \nmy_filter(L, num) \\\n*input:* list of numbers and a positive integer \\\n*output:* list of numbers not containing a multiple of num \\\n*example:* given list = [1, 2, 4, 5, 7] and num = 2, return [1, 5, 7]\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\ndef my_filter(L, num): return [x for x in L if x % num != 0]\nprint(my_filter([1, 2, 4, 5, 7], 2))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1, 5, 7]\n```\n:::\n:::\n\n\n### Problem 1.7.2:\nmy_lists(L) \\\n*input:* list L of non-negative integers \\\n*output:* a list of lists: for every element in $x$ in L create a list containing 1, 2,...,$x$ \\\n*example:* given [0] return [[]]\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndef my_lists(L): return [[x for x in range(1, y+1)] for y in L]\nprint(my_lists([0]))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[]]\n```\n:::\n:::\n\n\n### Problem 1.7.3:\nmy_function_composition(f, g) \\\n*input:* two functions $f$ and $g$, represented by dictionaries, such that $g \\circ f$ exists \\\n*output:* dictionary that represents the function $g \\circ f$ \\\n*example:* given $f$ = {0:'a', 1:'b'} and $g$ = {'a':'apple', 'b':'banana'}, return {0:'apple', 1:'banana}\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ndef my_function_composition(f, g): return {x:g[f[x]] for x in f}\nprint(my_function_composition({0:'a', 1:'b'}, {'a':'apple', 'b':'banana'}))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{0: 'apple', 1: 'banana'}\n```\n:::\n:::\n\n\n### Problem 1.7.4:\nmySum(L) \\\n*input:* list of numbers \\\n*output:* sum of numbers in the list\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ndef mySum(L): \n    sum = 0\n    for i in L:\n        sum += i\n    return sum\nprint(mySum([1, 2, 3, 4]))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n10\n```\n:::\n:::\n\n\n### Problem 1.7.5:\nmyProduct(L) \\\n*input:* list of numbers \\\n*output:* product of numbers in the list\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ndef myProduct(L): \n    product = 1\n    for i in L:\n        product *= i\n    return product\nprint(myProduct([1, 2, 3, 4]))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n24\n```\n:::\n:::\n\n\n### Problem 1.7.6\nmyMin(L) \\\n*input:* list of numbers \\\n*output:* minimum number in list\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nimport sys\ndef myMin(L):\n    min = sys.maxsize\n    for i in L:\n        if i < min:\n            min = i\n    return min\nprint(myMin([1, 2, 3, 4]))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1\n```\n:::\n:::\n\n\n### Problem 1.7.7\nmyConcat(L) \\\n*input:* list of strings \\\n*output:* concatenation of all the strings in the L\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\ndef myConcat(L): \n    str = ''\n    for i in L:\n        str += str.join(i)\n    return str\nprint(myConcat(['a', 'b', 'c', 'd']))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nabcd\n```\n:::\n:::\n\n\n### Problem 1.7.8\nmyUnion(L) \\\n*input:* list of sets\n*output:* the union of all sets in L\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\ndef myUnion(L): \n    list = set()\n    for i in L:\n        for j in i:\n            list.add(j)\n    return list\nL = [{1, 2, 3}, {2, 3, 4}, {3, 4, 5}]\nprint(myUnion(L))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{1, 2, 3, 4, 5}\n```\n:::\n:::\n\n\n### Problem 1.7.9\nKeeping in mind the comments above, what should be the value of each of the following? \\\n1. The sum of the numbers in an empty set \\\n2. The product of the numbers in an empty set \\\n3. The minimum of the numbers in an empty set \\\n4. The concatenation of an empty list of strings \\\n5. The union of an empty list of sets \\\nWhat goes wrong when we try to apply this reasoning to define the intersection of an empty list of sets? \\\n\nThe sum of the numbers in an empty set should be **0**. \nThe product of the numbers in an empty set should be **1**.\nThe minimum of the numbers in an empty set should be $\\infty$.\nThe concatenation of an empty list of strings should be **an empty string**.\nThe union of an empty list of sets should be **an empty set**.\nThe problem that occurs when we try to apply this reasoning to define the intersection of an empty list of sets is the following: since \n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nlist1 = []\nlist2 = []\nset1 = set(list1)\nset2 = set(list2)\nprint(list(set1.intersection(set2)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[]\n```\n:::\n:::\n\n\n### Problem 1.7.10\nEach of the following problems asks for the sum of two complex numbers. For each, write the solution and illustrate it with a diagram like that of Figure 1.1. The arrows you draw should (roughly) correspond to the vectors being added. \\\na. $(3 + 1\\mathbf i) + (2 + 2\\mathbf i)$ \\\nb. $(-1 + 2\\mathbf i) + (1 - 1\\mathbf i)$ \\\nc. $(2 + 0\\mathbf i) + (-3 + .001\\mathbf i)$ \\\nd. $4(0 + 2\\mathbf i) + (.001 + 1\\mathbf i)$\n\n### Problem 1.7.11\nUse the First Rule of Exponentiation (Section 1.4.9) to express the product of two exponentials as a single exponential. For example, ${e^{(\\pi/4)\\mathbf i}}{e^{(\\pi/4)\\mathbf i}}=e^{(\\pi/2)\\mathbf i}$. \\\na. $e^{1\\mathbf i}e^{2\\mathbf i}$ \\\nb. $e^{(\\pi/4)\\mathbf i}e^{(2\\pi/3)\\mathbf i}$ \\\nc. $e^{-(\\pi/4)\\mathbf i}e^{(2\\pi/3)\\mathbf i}$\n\n### Problem 1.7.12\nWrite a procedure transform(a, b, L) with the following spec: \\\n- *input:* complex numbers $a$ and $b$, and a list $L$ of complex numbers \\\n- *output:* the list of complex numbers obtained by applying $f(z) = \\mathrm{a}z + b$ to each complex number in $L$ \\\nNext, for each of the following problems, explain which value to choose for a and b in order to achieve the specified transformation. If there is no way to achieve the transformation, explain. \\\na. Translate $z$ one unit up and one unit to the right, then rotate ninety degrees clockwise, then scale by two. \\\nb. Scale the real part by two and the imaginary part by three, then rotate by forty-five degrees counterclockwise, and then translate down two units and left three units.\n\n### Problem 1.7.13\nFor each of the following problems, calculate the answer over $GF(2)$. \\\na. $1 + 1 + 1 + 0$\\\nb. $1 \\cdot 1 + 0 \\cdot 1 + 0 \\cdot 0 + 1 \\cdot 1$\\\nc. $(1 + 1 + 1) \\cdot (1 + 1 + 1 + 1)$\n\n### Problem 1.7.14\nCopy the example network used in Section 1.5.2. Suppose the bits that need to be transmitted in a given moment are $b_1 = 1$ and $b_2 = 1$. Label each link of the network with the bit transmitted across it according to the network-coding scheme. Show how the customer nodes $c$ and $d$ can recover $b_1$ and $b_2$.\n\n",
    "supporting": [
      "Chapter 1 Assignment_files\\figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}